CREATE TABLE Students (
StudentID INT PRIMARY KEY,
FirstName VARCHAR(50),
LastName VARCHAR(50),
Email VARCHAR(100),
BirthDate DATE,
EnrollmentDate DATE
);


INSERT INTO Students (StudentID, FirstName, LastName, Email, BirthDate, EnrollmentDate) VALUES
(1, 'Amit', 'Sharma', 'amit.sharma@email.com', '2000-01-15', '2022-08-01'),
(2, 'Priya', 'Verma', 'priya.verma@email.com', '1999-05-25', '2021-08-01'),
(3, 'Rahul', 'Patel', 'rahul.patel@email.com', '2001-03-10', '2023-09-01'),
(4, 'Sneha', 'Gupta', 'sneha.gupta@email.com', '2000-07-20', '2022-09-01'),
(5, 'Vikram', 'Singh', 'vikram.singh@email.com', '1998-11-15', '2020-08-01'),
(6, 'Neha', 'Chopra', 'neha.chopra@email.com', '1999-12-25', '2021-08-01'),
(7, 'Kunal', 'Mehta', 'kunal.mehta@email.com', '2000-06-30', '2023-08-01'),
(8, 'Anjali', 'Desai', 'anjali.desai@email.com', '1997-04-12', '2019-08-01'),
(9, 'Rohan', 'Joshi', 'rohan.joshi@email.com', '2001-09-05', '2022-08-01'),
(10, 'Pooja', 'Malhotra', 'pooja.malhotra@email.com', '2000-11-10', '2023-09-01'),
(11, 'Suresh', 'Reddy', 'suresh.reddy@email.com', '1999-03-15', '2021-08-01'),
(12, 'Deepika', 'Iyer', 'deepika.iyer@email.com', '1998-07-20', '2020-08-01'),
(13, 'Arjun', 'Nair', 'arjun.nair@email.com', '2000-02-10', '2022-08-01'),
(14, 'Kavita', 'Bhat', 'kavita.bhat@email.com', '2001-06-15', '2023-09-01'),
(15, 'Manoj', 'Kumar', 'manoj.kumar@email.com', '1999-08-20', '2021-08-01');


========================================================================


CREATE TABLE Courses (
CourseID INT PRIMARY KEY,
CourseName VARCHAR(100),
DepartmentID INT,
Credits INT
);


INSERT INTO Courses (CourseID, CourseName, DepartmentID, Credits) VALUES
(1, 'Introduction to SQL', 1, 3),
(2, 'Data Structures', 1, 4),
(3, 'Calculus I', 2, 3),
(4, 'Linear Algebra', 2, 4),
(5, 'Algorithms', 1, 3),
(6, 'Probability', 2, 3);


CREATE TABLE Instructors (
    InstructorID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Email VARCHAR(100),
    DepartmentID INT
);


INSERT INTO Instructors (InstructorID, FirstName, LastName, Email, DepartmentID) VALUES
(1, 'Rakesh', 'Sharma', 'rakesh.sharma@univ.com', 1),
(2, 'Sunita', 'Kapoor', 'sunita.kapoor@univ.com', 2),
(3, 'Vijay', 'Rao', 'vijay.rao@univ.com', 1),
(4, 'Meena', 'Saxena', 'meena.saxena@univ.com', 2);


========================================================================


CREATE TABLE Enrollments (
    EnrollmentID INT PRIMARY KEY,
    StudentID INT,
    CourseID INT,
    EnrollmentDate DATE,
    FOREIGN KEY (StudentID) REFERENCES Students(StudentID),
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);


INSERT INTO Enrollments (EnrollmentID, StudentID, CourseID, EnrollmentDate) VALUES
(1, 1, 1, '2022-08-01'), 
(2, 1, 2, '2022-08-01'), 
(3, 2, 3, '2021-08-01'),  
(4, 3, 3, '2023-09-01'),  
(5, 3, 4, '2023-09-01'),  
(6, 4, 1, '2022-09-01'),  
(7, 4, 2, '2022-09-01'),  
(8, 5, 3, '2020-08-01'),  
(9, 6, 5, '2021-08-01'),  
(10, 7, 1, '2023-08-01'), 
(11, 8, 3, '2019-08-01'), 
(12, 1, 5, '2022-08-01'), 
(13, 2, 6, '2021-08-01'), 
(14, 4, 5, '2022-09-01'), 
(15, 9, 1, '2022-08-01'), 
(16, 10, 1, '2023-09-01'),
(17, 11, 1, '2021-08-01'),
(18, 12, 1, '2020-08-01'),
(19, 9, 3, '2022-08-01'), 
(20, 10, 3, '2023-09-01'),
(21, 11, 3, '2021-08-01'),
(22, 12, 3, '2020-08-01'),
(23, 13, 3, '2022-08-01'),
(24, 14, 3, '2023-09-01'),
(25, 15, 3, '2021-08-01');


========================================================================


CREATE TABLE Departments (
    DepartmentID INT PRIMARY KEY,
    DepartmentName VARCHAR(50)
);


INSERT INTO Departments (DepartmentID, DepartmentName) VALUES
(1, 'Computer Science'),
(2, 'Mathematics');


========================================================================
[1]


CREATE: Done with CREATE TABLE and INSERT statements


READ: 
SELECT * FROM Students;


UPDATE:
UPDATE Students SET Email = 'amit.sharma.new@email.com' WHERE StudentID = 1;


DELETE:
DELETE FROM Enrollments WHERE StudentID = 2;
========================================================================
[2]


SELECT * FROM Students WHERE EnrollmentDate > '2022-12-31';
========================================================================
[3]


SELECT * FROM Courses WHERE DepartmentID = 2 LIMIT 5;








[4]


SELECT c.CourseName, COUNT(e.StudentID) as EnrollmentCount
FROM Courses c
LEFT JOIN Enrollments e ON c.CourseID = e.CourseID
GROUP BY c.CourseID, c.CourseName
HAVING COUNT(e.StudentID) > 5;
========================================================================
[5]


SELECT s.StudentID, s.FirstName, s.LastName
FROM Students s
JOIN Enrollments e1 ON s.StudentID = e1.StudentID AND e1.CourseID = 1
JOIN Enrollments e2 ON s.StudentID = e2.StudentID AND e2.CourseID = 2;
========================================================================
[6]


SELECT DISTINCT s.StudentID, s.FirstName, s.LastName
FROM Students s
JOIN Enrollments e ON s.StudentID = e.StudentID
WHERE e.CourseID IN (1, 2);
========================================================================
[7]


SELECT AVG(Credits) as AverageCredits FROM Courses;
========================================================================
[8]
Without a Salaries table, this query cannot be executed.
========================================================================
[9]
SELECT d.DepartmentName, COUNT(DISTINCT e.StudentID) as StudentCount
FROM Departments d
LEFT JOIN Courses c ON d.DepartmentID = c.DepartmentID
LEFT JOIN Enrollments e ON c.CourseID = e.CourseID
GROUP BY d.DepartmentID, d.DepartmentName;




[10]
SELECT s.FirstName, s.LastName, c.CourseName
FROM Students s
INNER JOIN Enrollments e ON s.StudentID = e.StudentID
INNER JOIN Courses c ON e.CourseID = c.CourseID;
========================================================================
[11]
SELECT s.FirstName, s.LastName, c.CourseName
FROM Students s
LEFT JOIN Enrollments e ON s.StudentID = e.StudentID
LEFT JOIN Courses c ON e.CourseID = c.CourseID;
[12]
SELECT s.*
FROM Students s
WHERE s.StudentID IN (
    SELECT e.StudentID
    FROM Enrollments e
    WHERE e.CourseID IN (
        SELECT CourseID
        FROM Enrollments
        GROUP BY CourseID
        HAVING COUNT(StudentID) > 9
    ));


[13]
SELECT StudentID, FirstName, LastName, YEAR(EnrollmentDate) as EnrollmentYear
FROM Students;
========================================================================
[14]
SELECT CONCAT(FirstName, ' ', LastName) as FullName
FROM Instructors;
========================================================================
[15]
SELECT 
    e.EnrollmentID,
    e.StudentID,
    e.CourseID,
    SUM(IF(e.StudentID IS NOT NULL, 1, 0)) OVER (ORDER BY e.EnrollmentID) as RunningTotal
FROM Enrollments e;
========================================================================
[16]
SELECT 
    s.StudentID,
    s.FirstName,
    s.LastName,
    IF(DATEDIFF('2025-04-09', s.EnrollmentDate) / 365 > 4, 'Senior', 'Junior') as StudentLevel
FROM Students s;