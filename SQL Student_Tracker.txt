CREATE TABLE Departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(100)
);


INSERT INTO Departments (department_id, department_name)
VALUES
(1, 'Computer Science'), 
(2, 'Mathematics');


========================================================================


CREATE TABLE Students (
    student_id INT PRIMARY KEY,
    name VARCHAR(100),
    dob DATE,
    gender VARCHAR(10),
    email VARCHAR(100),
    phone_number VARCHAR(15),
    address TEXT,
    admission_date DATE,
    department_id INT,
    FOREIGN KEY (department_id) REFERENCES Departments(department_id)
);




INSERT INTO Students (student_id, name, dob, gender, email, phone_number, address, admission_date, department_id)
VALUES 
    (1, 'Amit Sharma', '2002-06-15', 'Male', 'amit@example.com', '9876543210', 'Delhi', '2021-08-01', 1),
    (2, 'Priya Singh', '2001-07-20', 'Female', 'priya@example.com', '9876543211', 'Mumbai', '2020-08-01', 1),
    (3, 'Rahul Verma', '2002-01-10', 'Male', 'rahul@example.com', '9123456789', 'Bangalore', '2021-08-01', 2),
    (4, 'Neha Gupta', '2000-05-25', 'Female', NULL, '9876543212', 'Chennai', '2019-08-01', 1),
    (5, 'Karan Mehta', '2001-09-12', 'Male', 'karan@example.com', '9876543213', 'Hyderabad', '2020-08-01', 2),
    (6, 'Sneha Reddy', '2002-03-18', 'Female', 'sneha@example.com', '9123456780', 'Pune', '2021-08-01', 1),
    (7, 'Lakshmi Nair', '2002-04-20', 'Female', 'lakshmi@example.com', '9876543215', 'Kochi', '2021-08-01', 1),
   (8, 'Ravi Kumar', '2002-05-10', 'Male', 'ravi@example.com', '9876543216', 'Jaipur', '2021-08-01', 2);
 CREATE TABLE Faculty (
    faculty_id INT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    phone_number VARCHAR(15),
    department_id INT,
    admission_date DATE,
    FOREIGN KEY (department_id) REFERENCES Departments(department_id)
    );


 INSERT INTO Faculty (faculty_id, name, email, phone_number, department_id, admission_date)
VALUES 
    (1, 'Dr. Smith', 'smith@example.com', '1234567890', 1, '2018-01-01'),
    (2, 'Prof. Jones', 'jones@example.com', '0987654321', 2, '2018-01-01'),
    (3, 'Dr. Brown', 'brown@example.com', '1122334455', 1, '2020-01-01'),
    (4, 'Dr. Lee', 'lee@example.com', '5566778899', 2, '2020-01-01'),
    (5, 'Dr. Patel', 'patel@example.com', '6677889900', 1, '2018-01-01');
    


========================================================================
CREATE TABLE Courses (
course_id INT PRIMARY KEY,
course_name VARCHAR(100),
faculty_id INT,
FOREIGN KEY (faculty_id) REFERENCES Faculty(faculty_id)
);


INSERT INTO Courses (course_id, course_name, faculty_id)
VALUES 
    (1, 'Database Systems', 1),
    (2, 'Algorithms', 1),
    (3, 'Calculus', 2),
    (4, 'Statistics', 4),
    (5, 'Linear Algebra', NULL),
    (6, 'Discrete Math', 5);
========================================================================
 CREATE TABLE Enrollments (
    enrollment_id INT PRIMARY KEY,
    student_id INT,
    course_id INT,
    enrollment_date DATE,
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id));
INSERT INTO Enrollments (enrollment_id, student_id, course_id, enrollment_date)
VALUES 
    (1, 1, 1, '2021-09-01'),
    (2, 1, 2, '2021-09-01'),
    (3, 2, 1, '2021-09-01'),
    (4, 3, 3, '2021-09-01'),
    (5, 4, 1, '2021-09-01'),
    (6, 5, 4, '2021-09-01'),
    (7, 6, 2, '2021-09-01'),
    (8, 7, 6, '2021-09-01');
========================================================================


 CREATE TABLE Attendance (
    attendance_id INT PRIMARY KEY,
    student_id INT,
    course_id INT,
    attendance_date DATE,
    status ENUM('Present', 'Absent', 'Late'),
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);


INSERT INTO Attendance (attendance_id, student_id, course_id, attendance_date, status)
VALUES 
    (1, 1, 1, '2021-09-10', 'Present'),
    (2, 1, 1, '2021-09-11', 'Absent'),
    (3, 1, 2, '2021-09-10', 'Present'),
    (4, 2, 1, '2021-09-10', 'Present'),
    (5, 2, 1, '2021-09-11', 'Present'),
    (6, 3, 3, '2021-09-10', 'Absent'),
    (7, 3, 3, '2021-09-11', 'Late'),
    (8, 4, 1, '2021-09-10', 'Absent'),
    (9, 4, 1, '2021-09-11', 'Absent'),
    (10, 5, 4, '2021-09-10', 'Present'),
    (11, 5, 4, '2021-09-11', 'Absent'),
    (12, 6, 2, '2021-09-10', 'Present'),
    (13, 6, 2, '2021-09-11', 'Present'),
    (14, 7, 6, '2021-09-10', 'Absent'),
    (15, 7, 6, '2021-09-11', 'Absent'),
  (16, 4, 1, '2021-09-12', 'Absent'),
    (17, 4, 1, '2021-09-13', 'Absent'),
    (18, 4, 1, '2021-09-14', 'Absent'),
    (19, 4, 1, '2021-09-15', 'Absent'),
    (20, 5, 4, '2021-09-12', 'Present'),
(21, 4, 1, '2021-09-16', 'Absent'),
(22, 4, 1, '2021-09-17', 'Absent'),
(23, 4, 1, '2021-09-18', 'Absent'),
(24, 4, 1, '2021-09-19', 'Absent');
(25, 1, 1, '2021-09-20', 'Absent'),
(26, 1, 1, '2021-09-21', 'Absent'),
(27, 1, 1, '2021-09-22', 'Absent'),
(28, 1, 1, '2021-09-23', 'Absent'),
(29, 1, 1, '2021-09-24', 'Absent'),
(30, 1, 1, '2021-09-25', 'Absent'),
(31, 1, 1, '2021-09-26', 'Absent'),
(32, 1, 1, '2021-09-27', 'Absent'),
(33, 1, 1, '2021-09-28', 'Absent'),
(34, 1, 1, '2021-09-29', 'Absent');
========================================================================


    CREATE TABLE Grades (
    grade_id INT PRIMARY KEY,
    student_id INT,
    course_id INT,
    marks_obtained DECIMAL(5,2),
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);




INSERT INTO Grades (grade_id, student_id, course_id, marks_obtained)
VALUES 
    (1, 1, 1, 85.50),
    (2, 1, 2, 92.00),
    (3, 2, 1, 78.00),
    (4, 3, 3, 30.00),
    (5, 4, 1, 65.50),
    (6, 5, 4, 88.00),
    (7, 6, 2, 95.00),
    (8, 7, 6, 70.00),
    (9, 3, 3, 35.00),
    (10, 5, 4, 85.00);


========================================================================
 [1]


INSERT INTO Students (student_id, name, dob, gender, email, phone_number, address, admission_date, department_id)
VALUES (8, 'Arjun Kapoor', '2001-11-05', 'Male', 'arjun@example.com', '9876543214', 'Kolkata', '2020-08-01', 2);
INSERT INTO Enrollments (enrollment_id, student_id, course_id, enrollment_date)
VALUES (9, 7, 3, '2021-09-01');


UPDATE Students SET phone_number = '9123456781' WHERE student_id = 1;




DELETE FROM Enrollments WHERE student_id = 8;
DELETE FROM Students WHERE student_id = 8;
========================================================================
[2]


SELECT * FROM Students WHERE department_id = 1 LIMIT 3;
========================================================================


SELECT s.student_id, s.name, g.marks_obtained
FROM Students s
JOIN Grades g ON s.student_id = g.student_id
ORDER BY g.marks_obtained DESC LIMIT 10;
========================================================================
SELECT s.student_id, s.name
FROM Students s
JOIN (
    SELECT student_id, COUNT(*) AS total, SUM(CASE WHEN status = 'Present' THEN 1 ELSE 0 END) AS present
    FROM Attendance GROUP BY student_id
) a ON s.student_id = a.student_id
WHERE (a.present / a.total) * 100 < 75;
========================================================================
[3]


SELECT s.student_id, s.name
FROM Students s
JOIN (
    SELECT student_id, COUNT(*) AS total, SUM(CASE WHEN status = 'Present' THEN 1 ELSE 0 END) AS present
    FROM Attendance GROUP BY student_id
) a ON s.student_id = a.student_id
JOIN Grades g ON s.student_id = g.student_id
WHERE (a.present / a.total) * 100 < 50 AND g.marks_obtained < 40;
========================================================================
SELECT s.student_id, s.name, g.marks_obtained
FROM Students s
LEFT JOIN Grades g ON s.student_id = g.student_id
WHERE g.marks_obtained > 90 OR s.student_id IN (
    SELECT student_id
    FROM Attendance
    GROUP BY student_id
    HAVING SUM(CASE WHEN status = 'Present' THEN 1 ELSE 0 END) = COUNT(*)
);
========================================================================


SELECT f.faculty_id, f.name
FROM Faculty f
LEFT JOIN Courses c ON f.faculty_id = c.faculty_id
WHERE c.faculty_id IS NULL;
========================================================================
[4]


SELECT * FROM Students ORDER BY name;
========================================================================
SELECT d.department_name, COUNT(s.student_id) AS student_count
FROM Departments d
LEFT JOIN Students s ON d.department_id = s.department_id
GROUP BY d.department_name;
========================================================================
SELECT c.course_name, AVG(g.marks_obtained) AS avg_marks
FROM Courses c
LEFT JOIN Grades g ON c.course_id = g.course_id
GROUP BY c.course_name;
========================================================================
[5]


SELECT s.student_id, s.name, ROUND(
    SUM(CASE WHEN a.status = 'Present' THEN 1 ELSE 0 END) * 100.0 / COUNT(a.attendance_id), 2
) AS attendance_percentage
FROM Students s
LEFT JOIN Attendance a ON s.student_id = a.student_id
GROUP BY s.student_id, s.name;
========================================================================
SELECT c.course_name, MAX(g.marks_obtained) AS highest, MIN(g.marks_obtained) AS lowest
FROM Courses c
LEFT JOIN Grades g ON c.course_id = g.course_id
GROUP BY c.course_name;












SELECT d.department_name, COUNT(s.student_id) AS total_students
FROM Departments d
LEFT JOIN Students s ON d.department_id = s.department_id
GROUP BY d.department_name;
========================================================================
[6]


SELECT student_id, course_id, COUNT(*)
FROM Enrollments
GROUP BY student_id, course_id
HAVING COUNT(*) > 1;
========================================================================
SELECT c.course_name, f.name
FROM Courses c
LEFT JOIN Faculty f ON c.faculty_id = f.faculty_id;
========================================================================
[7]


SELECT s.*, d.department_name
FROM Students s
INNER JOIN Departments d ON s.department_id = d.department_id;
========================================================================
SELECT s.student_id, s.name
FROM Students s
LEFT JOIN Enrollments e ON s.student_id = e.student_id
WHERE e.student_id IS NULL;
========================================================================
SELECT c.course_id, c.course_name
FROM Faculty f
RIGHT JOIN Courses c ON f.faculty_id = c.faculty_id
WHERE f.faculty_id IS NULL;
========================================================================
SELECT s.student_id, s.name
FROM Students s
LEFT JOIN Grades g ON s.student_id = g.student_id
WHERE g.student_id IS NULL
UNION
SELECT s.student_id, s.name
FROM Grades g
LEFT JOIN Students s ON s.student_id = g.student_id
WHERE s.student_id IS NULL;
========================================================================


[8]


SELECT s.student_id, s.name, g.marks_obtained
FROM Students s
JOIN Grades g ON s.student_id = g.student_id
WHERE g.marks_obtained > (SELECT AVG(marks_obtained) FROM Grades);
========================================================================
SELECT c.course_id, c.course_name, f.name
FROM Courses c
JOIN Faculty f ON c.faculty_id = f.faculty_id
WHERE DATEDIFF('2025-04-11', f.admission_date) / 365 >= 5;
========================================================================
SELECT s.student_id, s.name, COUNT(a.attendance_id) AS missed_classes
FROM Students s
LEFT JOIN Attendance a ON s.student_id = a.student_id AND a.status = 'Absent'
GROUP BY s.student_id, s.name
HAVING COUNT(a.attendance_id) > 10;
========================================================================
[9]


SELECT a.attendance_date, MONTH(a.attendance_date) AS attendance_month
FROM Attendance a;
========================================================================
SELECT s.student_id, s.name, s.admission_date, 
       DATEDIFF('2025-04-11', s.admission_date) / 365 AS years_since_admission
FROM Students s;
========================================================================
SELECT attendance_date, DATE_FORMAT(attendance_date, '%d-%m-%Y') AS formatted_date
FROM Attendance;
========================================================================
[10]


SELECT faculty_id, UPPER(name) AS name_uppercase
FROM Faculty;
========================================================================
SELECT student_id, TRIM(name) AS trimmed_name
FROM Students;
========================================================================
SELECT student_id, name, 
       IFNULL(email, 'Email Not Provided') AS email
FROM Students;
========================================================================
[11]


SELECT s.student_id, s.name, AVG(g.marks_obtained) AS avg_marks,
       RANK() OVER (ORDER BY AVG(g.marks_obtained) DESC) AS ranking
FROM Students s
JOIN Grades g ON s.student_id = g.student_id
GROUP BY s.student_id, s.name;
========================================================================
SELECT a.course_id, c.course_name, a.attendance_date,
       SUM(CASE WHEN a.status = 'Present' THEN 1 ELSE 0 END) * 100.0 / 
       COUNT(*) OVER (PARTITION BY a.course_id ORDER BY a.attendance_date) AS cumulative_pct
FROM Attendance a
JOIN Courses c ON a.course_id = c.course_id
GROUP BY a.course_id, c.course_name, a.attendance_date;
========================================================================
SELECT enrollment_date, COUNT(*) AS monthly_enrollments,
       SUM(COUNT(*)) OVER (ORDER BY enrollment_date) AS running_total
FROM Enrollments
GROUP BY enrollment_date;
========================================================================
[12]


SELECT s.student_id, s.name, g.marks_obtained,
       CASE
           WHEN g.marks_obtained > 90 THEN 'Excellent'
           WHEN g.marks_obtained BETWEEN 75 AND 90 THEN 'Good'
           ELSE 'Needs Improvement'
       END AS performance_level
FROM Students s
JOIN Grades g ON s.student_id = g.student_id;
========================================================================
SELECT s.student_id, s.name, a.course_id,
       ROUND(SUM(CASE WHEN a.status = 'Present' THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS attendance_pct,
       CASE
           WHEN SUM(CASE WHEN a.status = 'Present' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) > 80 THEN 'Regular'
           WHEN SUM(CASE WHEN a.status = 'Present' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) BETWEEN 50 AND 80 THEN 'Irregular'
           ELSE 'Defaulter'
       END AS attendance_category
FROM Students s
LEFT JOIN Attendance a ON s.student_id = a.student_id
GROUP BY s.student_id, s.name, a.course_id;
========================================================================